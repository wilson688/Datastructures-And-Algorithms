package com.wilson688.algorithms.projecteuler;


/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
d(n)=(a+1)(b+1)(c+1)

 */

public class Problem12 {


    public long findNumber(int minDivisors) {
        long result = 0;

        if (minDivisors == result) return result;


        long num = 1;
        long currentSum = 0;

        while (result < minDivisors) {

            long sum = sumOfN(num);
            long divisors = divisorsOf(sum);

            result = divisors;
            currentSum = sum;
            num++;

        }

        return currentSum;
    }

    private long sumOfN(long num) {

        return num*(num + 1)/2;
    }

    private int divisorsOf(long num) {
        int counter = 0;
        int i = 2;
        int result = 1;
        while (num > 1) {
            if (num % i == 0) {
                num = num / i;
                counter++;
            }

            if (num <= 1 || num % i != 0){
                result *= (counter + 1);
                counter = 0;
                i++;
            }
        }

        return result;
    }


    public static void main(String[] args) {
        Problem12 prob = new Problem12();


        System.out.println(prob.findNumber(5));
        System.out.println(prob.findNumber(500));
    }
}
